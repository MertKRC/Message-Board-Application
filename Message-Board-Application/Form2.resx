<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABAREQEQEREBEBERARAREQDQEREBEBERARAREQEQEREBEBERANAREQEQEREBEBERARAREQEQEREA0BE
        RARAREQEQEREBEBERARAREQDQEREBEBERARAREQEQEREBEBERANAREQEQEREBEBERARAREQEQkZGA0tQ
        UARCRkYEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQERUlJBGZs
        bAE+QkIDERISDi8yMgVBRkYEQEREA0BERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEREhIBJKZ
        mQEnKioFBQYGLwICAoADAwNdMjU1BUNHRwRAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARCRkYESk9PA1VbWwNfZWUDXGJiA01SUgNESEgDQkZGBJqi
        ogEnKSkFBQUFNgICApYBAQHoAQEBxggICB5nbm4DQEREA0BERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBFBVVQOBh4cBu8PDAUFFRQQWFxcMDA0NEwsMDBgLDAwWEBERDyYo
        KAc/Q0MDBgcHKgICApABAQHoAQEB/wEBAe8DAwNK////AUBERARAREQEQEREBDw/PwRkaGgCaG1tAURI
        SARAREQEQEREBEBERARAREQEQEREBFRZWQOUm5sBEhMTDgQFBTYCAwNtAgICnAEBAbsBAQHMAQEB0wEC
        AtABAQHEAQEBqQICApYBAQHZAQEB/wEBAf8BAQH/AgICmhsdHQdITEwEQEREBEBERARSWFgDDw8PEQMD
        A1MGBgYsIyQkBM7Y2AFGS0sEQEREBEJGRgSLk5MBDQ4OEgMDA14BAQG5AQEB7gEBAf4BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAewDAwM4////AUBERARAREQEQEREBERI
        SAM8Pz8EAgICagEBAdwCAgKVBAUFNxweHgd8g4MBMjU1BQUFBTwBAQGxAQEB7QEBAfABAQHuAQEB8gEB
        AfkBAQH+AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB8QICAnEPEBANWV5eA0BE
        RARAREQEQEREBFhdXQMREhIOAgICqwEBAf8BAQHoAgICmwUGBjIPEBAQAwMDTAQEBE4EBQU4BQYGMAUF
        BTAEBQU4BAQESQIDA2gCAgKYAQEBywEBAfMBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB+AIC
        ApcKCwsTW2FhA0BERANAREQEQENDBP///wAFBQU4AQEB5QEBAboBAQHCAQEB4QICAoIDBARIAgICZgIC
        AoECAgKPAgICjgICAoICAgJnBAQERAcHByEKCwsZBAQEQAICApYBAQHkAQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/QICApMVFhYKTFFRBEBERARAREQEQ0hIBDQ3NwQCAgKRAQEBwwcHByUCAwNvAQEB1wEB
        AeMBAQHTAQEBwQICArYBAQG2AQICwQEBAdIBAQHiAQEB2gEBAasDAwNWDA0NFQUFBS8CAgKfAQEB9QEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB9QMDA1n///8AQEREBEBERARUWFgDLzExBQICAnEBAQHnBQYGLgAA
        AAAICAgiBQUFLwoLCxkUFRUNHR8fCB4gIAkTFBQMCwsLGAUFBTACAwNiAgICqQEBAeIBAgLDAwMDUBIT
        Ew0DAwNmAQEB6AEBAf8BAQH/AQEB/wEBAf8BAQH/AQICuQ0ODhFAREQDVltbAw4ODg8CAgKDAQEB5wIC
        ApUQEREQVFlZA1leXgKUnJwCZ21tAkpPTwNFSkoERUpKA0lOTgRla2sCgIeHAv///wAiJSUHBQUFNQEC
        Ap0BAQHmAgICigwNDRADAwNUAQEB6QEBAf8BAQH/AQEB/wEBAf8BAQHqBQUFOk5TUwQSExMLAgICjwEB
        AeUCAgJmGBkZClZbWwNAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEdL
        SwSJkZEBGRsbCAIDA1sBAQHgAgIClw0ODgwCAwNrAQEB+AEBAf8BAQH/AQEB/wEBAfcDAwNVsr29AQMD
        A2UBAQHmAwMDWV9jYwJPVFQDQEREBEJGRgNBRUUEQEREBEBERARAREQEQUVFBEJGRgRAREQEQEREBEBE
        RARAREQEQkZGBEBERARMUVEDztXVAQMDA04BAQHjAgICbQ8QEAwCAgKyAQEB/wEBAf8BAQH/AQEB9QME
        BFIICAghAQEBzwICAospKysESE1NBEBERARKTk4CMjU1BT5CQgJJTk4DP0NDBEdLSwNOUlIDOj09BHR6
        egJAREQEQUVFBHJ4eAI3OjoESE1NAkNHRwNGSkoDWl9fAwICAn8BAQHUCAkJHQMDA1YBAQH6AQEB/wEB
        Af8BAQHiBQUFLwMDA2MBAQHeBAQELbC7uwFAREQEbXR0AgUFBTECAgKbAgICfg0ODhJsc3MCERISDgIC
        AnYCAgKeBAQEOGVsbANaX18DBAQEQgICAqECAgJtFhgYC0pPTwOvuroBBwcHJwEBAd0DAwNdCAgIIAEB
        AeABAQH/AQEB/wECAqUYGhoKAQIClgECAsEQEhINTVJSA0NHRwQpLCwGAgICogEBAf8BAQH6AwMDVwAA
        AAADBARJAQEB9QEBAf8CAgKwGx0dCRETEw8BAQG+AQEB/wEBAe8EBAQ7////AUhNTQMVFhYKAQEBuwIC
        AowPEBAQAQEBywEBAf8BAQHnAwQEPf///wECAgKfAQEBuRgaGgpHS0sEQkZGBDo9PQUCAgKNAQEB/wEB
        Ae8DBARHAAAAAAQEBDoBAQHoAQEB/wICApwmKSkHFxgYCgECAqkBAQH/AQEB4QYGBjDs+/sBRElJBCAi
        IggBAQG0AgIClA4PDxABAQHMAQEB9QICAmo9QEAERUlJAwICAn4BAQHQCAkJGGJoaANAREQEXGJiAwoL
        CxoCAwNjAwQETBscHAlMUVEDJSgoBwMEBEUCAwNnCAkJHl9lZQNYXV0DBgcHIgIDA2kEBARALjExBUJH
        RwRfZGQCCwwMFQEBAc0CAgJ1BwgIJAEBAckCAwNqHR4eB0xRUQNAREQEBAQEPAEBAeADAwNXAAAAAEBE
        RARAREQESExMA////wBydnYBRUlJBD9DQwRGSkoEqK6uAdHV1QBXXFwDQEREBEBERARWW1sD+v//AKmt
        rQFDSEgEQEREBP///wACAwNPAQEB4wQFBToHCAghBQUFOigqKgRJTU0DQEREBEBERAQbHR0JAgICmwEB
        AcgHBwcg////AUBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERATQ3NwBCAgIHAEBAcMBAgKkGRsbCklNTQNfY2MCQkZGBEBERARAREQEQEREBPX/
        /wEHBwcnAQEBzQEBAbAICAgg////AEdMTARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARFSkoE////AAgJCRwCAgKrAQEB0QYGBiy4w8MBQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBLS/vwEEBAQ5AQEBzQEBAccEBARJHB0dB////wBWW1sDQ0dHBEBERARAREQEQEREBEBE
        RARAREQEQEREBENHRwNUWVkD////ACIjIwcEBAREAQEBwwEBAdEEBAQ8r7i4AUBERARAREQEQEREBEBE
        RARAREQEQEREBEBERANAREQEQUVFBI+XlwEGBgYoAgICpAEBAeUCAgKnAwMDTQoLCxkwMzMFmaCgAf//
        /wD///8A////AP///wDv9PQALzIyBQoLCxcDBARLAgICowEBAeUCAgKqBQYGK662tgFBRUUEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBIOJiQETFBQLAwMDUAEBAbQBAQHiAQEB0wEC
        AqYCAgJ+AwMDYgMDA1YDAwNVAwMDYQICAn0BAgKlAQEB0QEBAeMBAgK2AwMDVQ8QEA1yeXkCQUVFBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBE9UVAPEzc0BEhMTCwUF
        BTUCAwNyAQICpwECAscBAQHWAQEB3AEBAdwBAQHXAQICyAICAqgCAgJ0BQUFOBMUFAz///8BSU1NA0BE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQDQEREBEBERARAREQEQEREBEBE
        RARKTk4D2N3dAdnf3wArLi4GDxAQDwkKChsHCAgiBwcHIgoKChwPEBAQKCoqBv///wCytrYBSU1NBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBENHRwROU1MDbnV1AnmAgAJ8g4MCa3FxAk9TUwNDR0cDQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQDQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQDQEREBEBERARAREQEQEREBEBERANAREQEQEREBEBE
        RARAREQEQEREA0BERARAREQEQEREBEBERARAREQDQEREBEBERARAREQEQEREBEBERANAREQEQEREBEBE
        RARAREQEQEREA0BERARAREQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAA
        AAEBAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAAAAARBCIAAAAAAAQACAABACAAAB8AAAAA
        AAAAAAAAAIBAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>